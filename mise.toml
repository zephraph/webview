[tools]
deno = "2.1.9"
python = "3.13.1"
"npm:@ast-grep/cli" = "0.32.2"
rust = { version = "1.78.0", postinstall = "rustup component add rustfmt clippy rust-analyzer" }
ruff = "0.9.1"
uv = "0.5.20"

[settings]
experimental = true
pipx.uvx = true

[tasks."ci:install-deps"]
hide = true
description = "Install CI dependencies (only runs on CI)"
run = """
    {% if env.CI and os() == "linux" %}
    sudo apt-get update
    sudo apt-get install -y libwebkit2gtk-4.1-dev 
    {% endif %}
  """

[tasks.sync-versions]
description = "Update all version references"
run = "deno run -A scripts/sync-versions.ts"

## Gen

[tasks."gen:rust"]
depends = ["ci:install-deps"]
description = "Generate JSON schemas from the rust code"
run = "cargo run --bin generate_schemas"
sources = ["src/**/*.rs", "Cargo.toml", "Cargo.lock"]
outputs = ["schemas/*.json"]

[tasks."gen:deno"]
description = "Generate the deno client"
run = "deno run -A scripts/generate-schema/index.ts --language typescript"
depends = ["gen:rust"]
sources = ["schemas/*", "scripts/generate-schema.ts"]
outputs = ["src/clients/deno/schemas.ts"]

[tasks."gen:python"]
description = "Generate the python client"
run = "deno run -A scripts/generate-schema/index.ts --language python"
depends = ["gen:rust"]

## Debug

[tasks."print-schema"]
description = "Prints a simplified version of the schema"
usage = '''
arg "[schema]" help="The schema to print; prints all if not provided"
'''
run = "deno run -A scripts/generate-schema/debug.ts {{arg(name=\"schema\")}}"

## Publishing

[tasks."verify-publish:deno"]
description = "Verify the deno client is pulishable"
dir = "src/clients/deno"
run = "deno publish --dry-run"

[tasks.gen]
description = "Run all code gen tasks"
depends = ["gen:*"]

## Build

[tasks."build:rust"]
description = "Build the webview binary"
run = """
{% set xwin = '' %}
{% set features = '' %}
{% if get_env(name='MISE_ENV', default='') == 'windows' %}
  {% set xwin = ' xwin' %}
{% endif %}
{% if get_env(name='CI', default='') != 'true' %}
  {% set features = ' --features transparent,devtools' %}
{% endif %}
cargo{{xwin}} build --bin webview{{features}}
"""
sources = ["src/**/*.rs", "Cargo.toml", "Cargo.lock"]
outputs = ["target/debug/webview"]
depends = ["gen:rust"]

[tasks."build:deno"]
description = "Run code gen and ensure the binary is built"
depends = ["gen:deno", "build:rust"]

[tasks.build]
description = "Build all targets"
depends = ["build:*"]

## Lint

[tasks."lint:rust"]
description = "Run clippy against rust code"
depends = ["ci:install-deps"]
run = ["cargo fmt --check", "cargo clippy"]

[tasks."lint:deno"]
description = "Run deno lint"
dir = "src/clients/deno"
run = ["deno lint", "deno check ."]

[tasks."lint:ast-grep"]
description = "Run ast-grep lint"
run = """
{% set format = '' %}
{% if get_env(name='CI', default='') == 'true' %}
  {% set format = ' --format=github' %}
{% endif %}
sg scan {{format}} .
"""

[tasks."lint"]
description = "Run all linting tasks"
depends = ["lint:*"]

## Example

[tasks."example:deno"]
description = "Run a deno example"
depends = ["build:deno"]
env = { LOG_LEVEL = "debug", WEBVIEW_BIN = "../../../target/debug/webview" }
run = "deno run -E -R -N --allow-run examples/{{arg(name=\"example\")}}.ts"
dir = "src/clients/deno"
