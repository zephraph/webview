import { jsonSchemaToZod as compile } from "npm:json-schema-to-zod";
import { walk } from "https://deno.land/std@0.190.0/fs/walk.ts";
import { basename } from "https://deno.land/std@0.190.0/path/mod.ts";

const schemasDir = new URL("../schemas", import.meta.url).pathname;
const outputFile = new URL("../src/schemas.ts", import.meta.url).pathname;

async function generateZodSchema(filePath: string): Promise<string> {
  const jsonSchema = JSON.parse(await Deno.readTextFile(filePath));
  const schemaName = basename(filePath, ".json");
  const zodSchema = compile(jsonSchema, {
    name: schemaName,
    module: "esm",
    type: true,
    noImport: true,
  });

  return `// ${schemaName}\n${zodSchema}\n\n`;
}

async function main() {
  let output =
    "// DO NOT EDIT: This file is auto-generated by scripts/generate-zod.ts\n" +
    "import { z } from 'npm:zod';\n\n";

  for await (const entry of walk(schemasDir, { exts: [".json"] })) {
    if (entry.isFile) {
      const schema = await generateZodSchema(entry.path);
      output += schema;
    }
  }

  await Deno.writeTextFile(outputFile, output);
  console.log(`Generated Zod schemas: ${outputFile}`);

  // Run deno fmt on the generated file
  const command = new Deno.Command("deno", {
    args: ["fmt", outputFile],
  });
  await command.output();
}

main().catch(console.error);
