// DO NOT EDIT: This file is auto-generated by scripts/generate-zod.ts
import { z } from "npm:zod";

/**
 * Options for creating a webview.
 */
export type WebViewOptions =
  & {
    /** Sets whether clicking an inactive window also clicks through to the webview. Default is false. */
    acceptFirstMouse?: boolean;
    /** When true, all media can be played without user interaction. Default is false. */
    autoplay?: boolean;
    /**
     * Enables clipboard access for the page rendered on Linux and Windows.
     *
     * macOS doesnâ€™t provide such method and is always enabled by default. But your app will still need to add menu item accelerators to use the clipboard shortcuts.
     */
    clipboard?: boolean;
    /** When true, the window will have a border, a title bar, etc. Default is true. */
    decorations?: boolean;
    /**
     * Enable or disable webview devtools.
     *
     * Note this only enables devtools to the webview. To open it, you can call `webview.open_devtools()`, or right click the page and open it from the context menu.
     */
    devtools?: boolean;
    /** Sets whether the webview should be focused when created. Default is false. */
    focused?: boolean;
    /**
     * Run the WebView with incognito mode. Note that WebContext will be ingored if incognito is enabled.
     *
     * Platform-specific: - Windows: Requires WebView2 Runtime version 101.0.1210.39 or higher, does nothing on older versions, see https://learn.microsoft.com/en-us/microsoft-edge/webview2/release-notes/archive?tabs=dotnetcsharp#10121039
     */
    incognito?: boolean;
    /** Sets whether host should be able to receive messages from the webview via `window.ipc.postMessage`. */
    ipc?: boolean;
    /** The size of the window. */
    size?: "maximized" | "fullscreen" | {
      height: number;
      width: number;
    };
    /** Sets the title of the window. */
    title: string;
    /** Sets whether the window should be transparent. */
    transparent?: boolean;
  }
  & (
    | {
      url: string;
    }
    | {
      html: string;
    }
  );
export const WebViewOptions: z.ZodType<WebViewOptions> = z.intersection(
  z.object({
    acceptFirstMouse: z.boolean().optional(),
    autoplay: z.boolean().optional(),
    clipboard: z.boolean().optional(),
    decorations: z.boolean().optional(),
    devtools: z.boolean().optional(),
    focused: z.boolean().optional(),
    incognito: z.boolean().optional(),
    ipc: z.boolean().optional(),
    size: z.union([
      z.literal("maximized"),
      z.literal("fullscreen"),
      z.object({ height: z.number(), width: z.number() }),
    ])
      .optional(),
    title: z.string(),
    transparent: z.boolean().optional(),
  }),
  z.union([z.object({ url: z.string() }), z.object({ html: z.string() })]),
);

/**
 * Explicit requests from the client to the webview.
 */
export type WebViewRequest =
  | {
    $type: "getVersion";
    id: string;
  }
  | {
    $type: "eval";
    id: string;
    js: string;
  }
  | {
    $type: "setTitle";
    id: string;
    title: string;
  }
  | {
    $type: "getTitle";
    id: string;
  }
  | {
    $type: "setVisibility";
    id: string;
    visible: boolean;
  }
  | {
    $type: "isVisible";
    id: string;
  }
  | {
    $type: "openDevTools";
    id: string;
  }
  | {
    $type: "getSize";
    id: string;
    include_decorations?: boolean;
  }
  | {
    $type: "setSize";
    id: string;
    size: {
      height: number;
      width: number;
    };
  }
  | {
    $type: "fullscreen";
    fullscreen?: boolean;
    id: string;
  }
  | {
    $type: "maximize";
    id: string;
    maximized?: boolean;
  }
  | {
    $type: "minimize";
    id: string;
    minimized?: boolean;
  };
export const WebViewRequest: z.ZodType<WebViewRequest> = z.discriminatedUnion(
  "$type",
  [
    z.object({ $type: z.literal("getVersion"), id: z.string() }),
    z.object({ $type: z.literal("eval"), id: z.string(), js: z.string() }),
    z.object({
      $type: z.literal("setTitle"),
      id: z.string(),
      title: z.string(),
    }),
    z.object({ $type: z.literal("getTitle"), id: z.string() }),
    z.object({
      $type: z.literal("setVisibility"),
      id: z.string(),
      visible: z.boolean(),
    }),
    z.object({ $type: z.literal("isVisible"), id: z.string() }),
    z.object({ $type: z.literal("openDevTools"), id: z.string() }),
    z.object({
      $type: z.literal("getSize"),
      id: z.string(),
      include_decorations: z.boolean().optional(),
    }),
    z.object({
      $type: z.literal("setSize"),
      id: z.string(),
      size: z.object({ height: z.number(), width: z.number() }),
    }),
    z.object({
      $type: z.literal("fullscreen"),
      fullscreen: z.boolean().optional(),
      id: z.string(),
    }),
    z.object({
      $type: z.literal("maximize"),
      id: z.string(),
      maximized: z.boolean().optional(),
    }),
    z.object({
      $type: z.literal("minimize"),
      id: z.string(),
      minimized: z.boolean().optional(),
    }),
  ],
);

/**
 * Responses from the webview to the client.
 */
export type WebViewResponse =
  | {
    $type: "ack";
    id: string;
  }
  | {
    $type: "result";
    id: string;
    result:
      | {
        $type: "string";
        value: string;
      }
      | {
        $type: "boolean";
        value: boolean;
      }
      | {
        $type: "float";
        value: number;
      }
      | {
        $type: "size";
        value: {
          height: number;
          scale_factor: number;
          width: number;
        };
      };
  }
  | {
    $type: "err";
    id: string;
    message: string;
  };
export const WebViewResponse: z.ZodType<WebViewResponse> = z.discriminatedUnion(
  "$type",
  [
    z.object({ $type: z.literal("ack"), id: z.string() }),
    z.object({
      $type: z.literal("result"),
      id: z.string(),
      result: z.discriminatedUnion("$type", [
        z.object({ $type: z.literal("string"), value: z.string() }),
        z.object({ $type: z.literal("boolean"), value: z.boolean() }),
        z.object({ $type: z.literal("float"), value: z.number() }),
        z.object({
          $type: z.literal("size"),
          value: z.object({
            height: z.number(),
            scale_factor: z.number(),
            width: z.number(),
          }),
        }),
      ]),
    }),
    z.object({ $type: z.literal("err"), id: z.string(), message: z.string() }),
  ],
);

/**
 * Complete definition of all outbound messages from the webview to the client.
 */
export type WebViewMessage =
  | {
    $type: "notification";
    data:
      | {
        $type: "started";
        version: string;
      }
      | {
        $type: "ipc";
        message: string;
      }
      | {
        $type: "closed";
      };
  }
  | {
    $type: "response";
    data:
      | {
        $type: "ack";
        id: string;
      }
      | {
        $type: "result";
        id: string;
        result:
          | {
            $type: "string";
            value: string;
          }
          | {
            $type: "boolean";
            value: boolean;
          }
          | {
            $type: "float";
            value: number;
          }
          | {
            $type: "size";
            value: {
              height: number;
              scale_factor: number;
              width: number;
            };
          };
      }
      | {
        $type: "err";
        id: string;
        message: string;
      };
  };
export const WebViewMessage: z.ZodType<WebViewMessage> = z.discriminatedUnion(
  "$type",
  [
    z.object({
      $type: z.literal("notification"),
      data: z.discriminatedUnion("$type", [
        z.object({ $type: z.literal("started"), version: z.string() }),
        z.object({ $type: z.literal("ipc"), message: z.string() }),
        z.object({ $type: z.literal("closed") }),
      ]),
    }),
    z.object({
      $type: z.literal("response"),
      data: z.discriminatedUnion("$type", [
        z.object({ $type: z.literal("ack"), id: z.string() }),
        z.object({
          $type: z.literal("result"),
          id: z.string(),
          result: z.discriminatedUnion("$type", [
            z.object({ $type: z.literal("string"), value: z.string() }),
            z.object({ $type: z.literal("boolean"), value: z.boolean() }),
            z.object({ $type: z.literal("float"), value: z.number() }),
            z.object({
              $type: z.literal("size"),
              value: z.object({
                height: z.number(),
                scale_factor: z.number(),
                width: z.number(),
              }),
            }),
          ]),
        }),
        z.object({
          $type: z.literal("err"),
          id: z.string(),
          message: z.string(),
        }),
      ]),
    }),
  ],
);
