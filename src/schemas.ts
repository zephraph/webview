// DO NOT EDIT: This file is auto-generated by scripts/generate-zod.ts
import { z } from "npm:zod";

// ClientEvent
export const ClientEvent = z.object({
  "$type": z.literal("eval"),
  "data": z.string(),
});
export type ClientEvent = z.infer<typeof ClientEvent>;

// WebViewOptions
export const WebViewOptions = z.object({
  "title": z.string(),
  "url": z.string(),
});
export type WebViewOptions = z.infer<typeof WebViewOptions>;

// WebViewEvent
export const WebViewEvent = z.any().superRefine((x, ctx) => {
  const schemas = [
    z.object({ "$type": z.literal("started") }),
    z.object({ "$type": z.literal("closed") }),
  ];
  const errors = schemas.reduce<z.ZodError[]>(
    (errors, schema) =>
      ((result) => result.error ? [...errors, result.error] : errors)(
        schema.safeParse(x),
      ),
    [],
  );
  if (schemas.length - errors.length !== 1) {
    ctx.addIssue({
      path: ctx.path,
      code: "invalid_union",
      unionErrors: errors,
      message: "Invalid input: Should pass single schema",
    });
  }
});
export type WebViewEvent = z.infer<typeof WebViewEvent>;
