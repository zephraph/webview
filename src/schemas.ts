// DO NOT EDIT: This file is auto-generated by scripts/generate-zod.ts
import { z } from "npm:zod";

export type WebViewOptions =
  & {
    accept_first_mouse?: boolean;
    autoplay?: boolean;
    clipboard?: boolean;
    decorations?: boolean;
    devtools?: boolean;
    focused?: boolean;
    fullscreen?: boolean;
    incognito?: boolean;
    ipc?: boolean;
    title: string;
    transparent?: boolean;
  }
  & (
    | {
      url: string;
    }
    | {
      html: string;
    }
  );
export const WebViewOptions: z.ZodType<WebViewOptions> = z.intersection(
  z.object({
    accept_first_mouse: z.boolean().optional(),
    autoplay: z.boolean().optional(),
    clipboard: z.boolean().optional(),
    decorations: z.boolean().optional(),
    devtools: z.boolean().optional(),
    focused: z.boolean().optional(),
    fullscreen: z.boolean().optional(),
    incognito: z.boolean().optional(),
    ipc: z.boolean().optional(),
    title: z.string(),
    transparent: z.boolean().optional(),
  }),
  z.union([z.object({ url: z.string() }), z.object({ html: z.string() })]),
);

export type WebViewRequest =
  | {
    $type: "getVersion";
    id: string;
  }
  | {
    $type: "eval";
    id: string;
    js: string;
  }
  | {
    $type: "setTitle";
    id: string;
    title: string;
  }
  | {
    $type: "getTitle";
    id: string;
  }
  | {
    $type: "setVisibility";
    id: string;
    visible: boolean;
  }
  | {
    $type: "isVisible";
    id: string;
  }
  | {
    $type: "openDevTools";
    id: string;
  };
export const WebViewRequest: z.ZodType<WebViewRequest> = z.discriminatedUnion(
  "$type",
  [
    z.object({ $type: z.literal("getVersion"), id: z.string() }),
    z.object({ $type: z.literal("eval"), id: z.string(), js: z.string() }),
    z.object({
      $type: z.literal("setTitle"),
      id: z.string(),
      title: z.string(),
    }),
    z.object({ $type: z.literal("getTitle"), id: z.string() }),
    z.object({
      $type: z.literal("setVisibility"),
      id: z.string(),
      visible: z.boolean(),
    }),
    z.object({ $type: z.literal("isVisible"), id: z.string() }),
    z.object({ $type: z.literal("openDevTools"), id: z.string() }),
  ],
);

export type WebViewResponse =
  | {
    $type: "ack";
    id: string;
  }
  | {
    $type: "result";
    id: string;
    result:
      | {
        $type: "string";
        value: string;
      }
      | {
        $type: "json";
        value: string;
      }
      | {
        $type: "boolean";
        value: boolean;
      };
  }
  | {
    $type: "err";
    id: string;
    message: string;
  };
export const WebViewResponse: z.ZodType<WebViewResponse> = z.discriminatedUnion(
  "$type",
  [
    z.object({ $type: z.literal("ack"), id: z.string() }),
    z.object({
      $type: z.literal("result"),
      id: z.string(),
      result: z.discriminatedUnion("$type", [
        z.object({ $type: z.literal("string"), value: z.string() }),
        z.object({ $type: z.literal("json"), value: z.string() }),
        z.object({ $type: z.literal("boolean"), value: z.boolean() }),
      ]),
    }),
    z.object({ $type: z.literal("err"), id: z.string(), message: z.string() }),
  ],
);

export type WebViewMessage =
  | {
    $type: "notification";
    data:
      | {
        $type: "started";
        version: string;
      }
      | {
        $type: "ipc";
        message: string;
      }
      | {
        $type: "closed";
      };
  }
  | {
    $type: "response";
    data:
      | {
        $type: "ack";
        id: string;
      }
      | {
        $type: "result";
        id: string;
        result:
          | {
            $type: "string";
            value: string;
          }
          | {
            $type: "json";
            value: string;
          }
          | {
            $type: "boolean";
            value: boolean;
          };
      }
      | {
        $type: "err";
        id: string;
        message: string;
      };
  };
export const WebViewMessage: z.ZodType<WebViewMessage> = z.discriminatedUnion(
  "$type",
  [
    z.object({
      $type: z.literal("notification"),
      data: z.discriminatedUnion("$type", [
        z.object({ $type: z.literal("started"), version: z.string() }),
        z.object({ $type: z.literal("ipc"), message: z.string() }),
        z.object({ $type: z.literal("closed") }),
      ]),
    }),
    z.object({
      $type: z.literal("response"),
      data: z.discriminatedUnion("$type", [
        z.object({ $type: z.literal("ack"), id: z.string() }),
        z.object({
          $type: z.literal("result"),
          id: z.string(),
          result: z.discriminatedUnion("$type", [
            z.object({ $type: z.literal("string"), value: z.string() }),
            z.object({ $type: z.literal("json"), value: z.string() }),
            z.object({ $type: z.literal("boolean"), value: z.boolean() }),
          ]),
        }),
        z.object({
          $type: z.literal("err"),
          id: z.string(),
          message: z.string(),
        }),
      ]),
    }),
  ],
);
