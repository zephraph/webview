// Code generated by generate-schema/index.ts; DO NOT EDIT.
package webview

import (
	"encoding/json"
	"fmt"
)

// Notification Messages that are sent unbidden from the webview to the client. 
type Notification  interface{}
 
// NotificationStarted represents the started variant of Notification 
type NotificationStarted struct { 
	Type string `json:"$type"` 
	// Version The version of the webview binary 
	Version string `json:"version"` 
} 

 
// NotificationIpc represents the ipc variant of Notification 
type NotificationIpc struct { 
	Type string `json:"$type"` 
	// Message The message sent from the webview UI to the client. 
	Message string `json:"message"` 
} 

 
// NotificationClosed represents the closed variant of Notification 
type NotificationClosed struct { 
	Type string `json:"$type"` 
} 

 
type SizeWithScale  struct { 
	// Height The height of the window in logical pixels. 
	Height float64 `json:"height"` 
	// ScaleFactor The ratio between physical and logical sizes. 
	ScaleFactor float64 `json:"scaleFactor"` 
	// Width The width of the window in logical pixels. 
	Width float64 `json:"width"` 
}
 
// ResultType Types that can be returned from webview results. 
type ResultType  interface{}
 
// ResultTypeString represents the string variant of ResultType 
type ResultTypeString struct { 
	Type string `json:"$type"` 
	Value string `json:"value"` 
} 

 
// ResultTypeBoolean represents the boolean variant of ResultType 
type ResultTypeBoolean struct { 
	Type string `json:"$type"` 
	Value bool `json:"value"` 
} 

 
// ResultTypeFloat represents the float variant of ResultType 
type ResultTypeFloat struct { 
	Type string `json:"$type"` 
	Value float64 `json:"value"` 
} 

 
// ResultTypeSize represents the size variant of ResultType 
type ResultTypeSize struct { 
	Type string `json:"$type"` 
	Value SizeWithScale `json:"value"` 
} 

 
// Response Responses from the webview to the client. 
type Response  interface{}
 
// ResponseAck represents the ack variant of Response 
type ResponseAck struct { 
	Type string `json:"$type"` 
	Id int `json:"id"` 
} 

 
// ResponseResult represents the result variant of Response 
type ResponseResult struct { 
	Type string `json:"$type"` 
	Id int `json:"id"` 
	Result ResultType `json:"result"` 
} 

 
// ResponseErr represents the err variant of Response 
type ResponseErr struct { 
	Type string `json:"$type"` 
	Id int `json:"id"` 
	Message string `json:"message"` 
} 

 
// Message Complete definition of all outbound messages from the webview to the client. 
type Message  interface{}
 
// MessageNotification represents the notification variant of Message 
type MessageNotification struct { 
	Type string `json:"$type"` 
	Data Notification `json:"data"` 
} 

 
// MessageResponse represents the response variant of Message 
type MessageResponse struct { 
	Type string `json:"$type"` 
	Data Response `json:"data"` 
} 

 


// ContentProvider interface that all content types must implement 
type ContentProvider interface { 
	isContent() // marker method 
} 

// HtmlContent represents inline HTML content 
type HtmlContent struct { 
	Html   string `json:"html"` 
	Origin string `json:"origin,omitempty"` 
} 

// UrlContent represents content loaded from a URL 
type UrlContent struct { 
	Url     string            `json:"url"` 
	Headers map[string]string `json:"headers,omitempty"` 
} 

// Implement ContentProvider interface 
func (h HtmlContent) isContent() {} 
func (u UrlContent) isContent()  {} 

// NewHtmlContent creates HtmlContent with the specified HTML and optional origin 
func NewHtmlContent(html string, origin ...string) HtmlContent { 
	c := HtmlContent{Html: html} 
	if len(origin) > 0 { 
		c.Origin = origin[0] 
	} 
	return c 
} 

// NewUrlContent creates UrlContent with the specified URL and optional headers 
func NewUrlContent(url string, headers ...map[string]string) UrlContent { 
	c := UrlContent{Url: url} 
	if len(headers) > 0 { 
		c.Headers = headers[0] 
	} 
	return c 
} 

// Content wraps a ContentProvider for JSON marshaling 
type Content struct { 
	provider ContentProvider 
} 

// ContentFrom creates a new Content from any ContentProvider 
func ContentFrom(provider ContentProvider) Content { 
	return Content{provider: provider} 
} 

// MarshalJSON implements custom JSON marshaling for Content 
func (c Content) MarshalJSON() ([]byte, error) { 
	return json.Marshal(c.provider) 
} 

// UnmarshalJSON implements custom JSON unmarshaling for Content 
func (c *Content) UnmarshalJSON(data []byte) error { 
	var raw map[string]interface{} 
	if err := json.Unmarshal(data, &raw); err != nil { 
		return err 
	} 

	if _, hasURL := raw["url"]; hasURL { 
		var content UrlContent 
		if err := json.Unmarshal(data, &content); err != nil { 
			return err 
		} 
		c.provider = content 
		return nil 
	} 

	if _, hasHTML := raw["html"]; hasHTML { 
		var content HtmlContent 
		if err := json.Unmarshal(data, &content); err != nil { 
			return err 
		} 
		c.provider = content 
		return nil 
	} 

	return fmt.Errorf("unknown content type") 
} 

type Size  struct { 
	// Height The height of the window in logical pixels. 
	Height float64 `json:"height"` 
	// Width The width of the window in logical pixels. 
	Width float64 `json:"width"` 
}
 
type WindowSizeStates  string
 
type WindowSize  interface{}
 
// Options Options for creating a webview. 
type Options  struct { 
	// AcceptFirstMouse Sets whether clicking an inactive window also clicks through to the webview. Default is false. 
	AcceptFirstMouse *bool `json:"acceptFirstMouse,omitempty"` 
	// Autoplay When true, all media can be played without user interaction. Default is false. 
	Autoplay *bool `json:"autoplay,omitempty"` 
	// Clipboard Enables clipboard access for the page rendered on Linux and Windows. 
	// Clipboard  
	// Clipboard macOS doesnâ€™t provide such method and is always enabled by default. But your app will still need to add menu item accelerators to use the clipboard shortcuts. 
	Clipboard *bool `json:"clipboard,omitempty"` 
	// Decorations When true, the window will have a border, a title bar, etc. Default is true. 
	Decorations *bool `json:"decorations,omitempty"` 
	// Devtools Enable or disable webview devtools. 
	// Devtools  
	// Devtools Note this only enables devtools to the webview. To open it, you can call `webview.open_devtools()`, or right click the page and open it from the context menu. 
	Devtools *bool `json:"devtools,omitempty"` 
	// Focused Sets whether the webview should be focused when created. Default is false. 
	Focused *bool `json:"focused,omitempty"` 
	// Incognito Run the WebView with incognito mode. Note that WebContext will be ingored if incognito is enabled. 
	// Incognito  
	// Incognito Platform-specific: - Windows: Requires WebView2 Runtime version 101.0.1210.39 or higher, does nothing on older versions, see https://learn.microsoft.com/en-us/microsoft-edge/webview2/release-notes/archive?tabs=dotnetcsharp#10121039 
	Incognito *bool `json:"incognito,omitempty"` 
	// InitializationScript Run JavaScript code when loading new pages. When the webview loads a new page, this code will be executed. It is guaranteed that the code is executed before window.onload. 
	InitializationScript *string `json:"initializationScript,omitempty"` 
	// Ipc Sets whether host should be able to receive messages from the webview via `window.ipc.postMessage`. 
	Ipc *bool `json:"ipc,omitempty"` 
	// Load The content to load into the webview. 
	Load *Content `json:"load,omitempty"` 
	// Size The size of the window. 
	Size *WindowSize `json:"size,omitempty"` 
	// Title Sets the title of the window. 
	Title string `json:"title"` 
	// Transparent Sets whether the window should be transparent. 
	Transparent *bool `json:"transparent,omitempty"` 
	// UserAgent Sets the user agent to use when loading pages. 
	UserAgent *string `json:"userAgent,omitempty"` 
}
 


// Request Explicit requests from the client to the webview. 
type Request  interface{}
 
// RequestGetVersion represents the getVersion variant of Request 
type RequestGetVersion struct { 
	Type string `json:"$type"` 
	// Id The id of the request. 
	Id int `json:"id"` 
} 

 
// RequestEval represents the eval variant of Request 
type RequestEval struct { 
	Type string `json:"$type"` 
	// Id The id of the request. 
	Id int `json:"id"` 
	// Js The javascript to evaluate. 
	Js string `json:"js"` 
} 

 
// RequestSetTitle represents the setTitle variant of Request 
type RequestSetTitle struct { 
	Type string `json:"$type"` 
	// Id The id of the request. 
	Id int `json:"id"` 
	// Title The title to set. 
	Title string `json:"title"` 
} 

 
// RequestGetTitle represents the getTitle variant of Request 
type RequestGetTitle struct { 
	Type string `json:"$type"` 
	// Id The id of the request. 
	Id int `json:"id"` 
} 

 
// RequestSetVisibility represents the setVisibility variant of Request 
type RequestSetVisibility struct { 
	Type string `json:"$type"` 
	// Id The id of the request. 
	Id int `json:"id"` 
	// Visible Whether the window should be visible or hidden. 
	Visible bool `json:"visible"` 
} 

 
// RequestIsVisible represents the isVisible variant of Request 
type RequestIsVisible struct { 
	Type string `json:"$type"` 
	// Id The id of the request. 
	Id int `json:"id"` 
} 

 
// RequestOpenDevTools represents the openDevTools variant of Request 
type RequestOpenDevTools struct { 
	Type string `json:"$type"` 
	// Id The id of the request. 
	Id int `json:"id"` 
} 

 
// RequestGetSize represents the getSize variant of Request 
type RequestGetSize struct { 
	Type string `json:"$type"` 
	// Id The id of the request. 
	Id int `json:"id"` 
	// IncludeDecorations Whether to include the title bar and borders in the size measurement. 
	IncludeDecorations *bool `json:"include_decorations,omitempty"` 
} 

 
// RequestSetSize represents the setSize variant of Request 
type RequestSetSize struct { 
	Type string `json:"$type"` 
	// Id The id of the request. 
	Id int `json:"id"` 
	// Size The size to set. 
	Size Size `json:"size"` 
} 

 
// RequestFullscreen represents the fullscreen variant of Request 
type RequestFullscreen struct { 
	Type string `json:"$type"` 
	// Fullscreen Whether to enter fullscreen mode. If left unspecified, the window will enter fullscreen mode if it is not already in fullscreen mode or exit fullscreen mode if it is currently in fullscreen mode. 
	Fullscreen *bool `json:"fullscreen,omitempty"` 
	// Id The id of the request. 
	Id int `json:"id"` 
} 

 
// RequestMaximize represents the maximize variant of Request 
type RequestMaximize struct { 
	Type string `json:"$type"` 
	// Id The id of the request. 
	Id int `json:"id"` 
	// Maximized Whether to maximize the window. If left unspecified, the window will be maximized if it is not already maximized or restored if it was previously maximized. 
	Maximized *bool `json:"maximized,omitempty"` 
} 

 
// RequestMinimize represents the minimize variant of Request 
type RequestMinimize struct { 
	Type string `json:"$type"` 
	// Id The id of the request. 
	Id int `json:"id"` 
	// Minimized Whether to minimize the window. If left unspecified, the window will be minimized if it is not already minimized or restored if it was previously minimized. 
	Minimized *bool `json:"minimized,omitempty"` 
} 

 
// RequestLoadHtml represents the loadHtml variant of Request 
type RequestLoadHtml struct { 
	Type string `json:"$type"` 
	// Html HTML to set as the content of the webview. 
	Html string `json:"html"` 
	// Id The id of the request. 
	Id int `json:"id"` 
	// Origin What to set as the origin of the webview when loading html. If not specified, the origin will be set to the value of the `origin` field when the webview was created. 
	Origin *string `json:"origin,omitempty"` 
} 

 
// RequestLoadUrl represents the loadUrl variant of Request 
type RequestLoadUrl struct { 
	Type string `json:"$type"` 
	// Headers Optional headers to send with the request. 
	Headers map[string]string `json:"headers,omitempty"` 
	// Id The id of the request. 
	Id int `json:"id"` 
	// Url URL to load in the webview. 
	Url string `json:"url"` 
} 

 


